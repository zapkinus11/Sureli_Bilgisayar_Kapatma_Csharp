<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAbCAAATFVZACQWDBouJildNC87hDUxPok1MT6JNTE+iTUxPok1MT6JNTE+iTUxPok1MT6JNTE+iTUx
        Pok1MT6JNTE+iTMvOYEtJCVUIhQHEicbEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAKh8eADApLgAqHxw3P0FdxllqqfxgdcD/XnK5/15xuP9ecbj/XnG4/15xuP9ecbj/XnG4/15x
        uP9ecbj/XnG4/15xuP9ecrr/YHXA/1ZloPk8O1G0KBwWJisgHwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAqIB0AIhUHFj5AWsFmf9L/ZX3O/19zu/9id8P/YnfE/2J3xP9id8T/YnfE/2J3
        xP9id8T/YnfE/2J3xP9id8T/YnfE/2F2wv9fc7v/aIHW/2J3xP85OEqnHgsACisgHgAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAADApLgAsIyRTVmaj+WZ90P9id8T/cY/w/3OS9/9zkvf/c5L3/3OS
        9/9zkvf/c5L3/3OS9/9zkvf/c5L3/3OS9/9zkvf/cpL2/2+N7f9fdL3/aILX/1Baje4oGxQ3KyEhAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPDxSADItNnVecrn/X3O7/3CO7/9ykfX/cpH1/3KR
        9f9ykfX/cpH1/3KS9v9ykvf/cpL3/3KS9v9ykfX/cpH1/3KR9f9ykfX/cpH2/26K6P9gdL7/WGmo/C0k
        JFQvKCwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/QFoAMy45elxvtP9hdsH/cpH1/3KR
        9f9ykfX/cpH1/3KR9v9wj/P/bYjh/26G0/9uhtP/bYjh/3CP8/9ykfb/cpH1/3KR9f9ykfX/cY/y/190
        vv9YaKb9LiYpWjErMgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD9AWQAzLjl6XG6y/2F2
        wv9ykfX/cpH1/3KR9f9ykfb/born/3mKvf+Vnq//m6Ku/5uirv+Vnq//eYq9/26K5/9ykfb/cpH1/3KR
        9f9xkPL/YHS+/1dnpfwuJilaMSsyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP0BZADMu
        OXpcbrP/YXbC/3KR9f9ykfX/cpH2/26L6v+Dj7X/m6Ow/3mKwP9vh9X/b4fV/3mKv/+bo7D/g5C2/26L
        6v9ykfb/cpH1/3GQ8v9gdL7/V2el/C4mKVoxKzIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAA/QFkAMy45elxus/9hdsL/cpH1/3KR9f9xkPb/dIfE/5ykr/9vhMz/cI/0/3KS9/9ykvf/cI/0/2+E
        zP+co6//dIfF/3GQ9v9ykfX/cZDy/2B0vv9XZ6X8LiYpWjErMgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAD9AWQAzLjl6XG6z/2F2wv9ykfX/cpH1/26L7f+LlrP/g5G4/2+N8f9ykfX/cpH1/3KR
        9f9ykfX/b43x/4ORuP+Ll7P/bozt/3KR9f9xkPL/YHS+/1dnpfwuJilaMSsyAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAP0BZADMuOXpcbrP/YXbC/3KR9f9ykfb/bIjl/5Kbr/96jMT/cZD2/3KR
        9f9ykfb/cpH2/3KR9f9xkPb/eozE/5OcsP9tieX/cpH2/3GQ8v9gdL3/V2el/C4mKVoxKzIAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/QFkAMy45elxus/9hdsL/cpH1/3KR9v9tiun/kJqx/3yM
        vv9wkPX/cpH2/22G2P9sgsv/cZD0/3CQ9f98jL7/kJqx/22K6f9ykfb/cZDz/2eB1v9Zaaj8LiYoWjEr
        MgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD9AWQAzLjl6XG6z/2F2wv9ykfX/cpH1/3CO
        8/9/jrr/kpyx/2yH4v9wkPb/fIu7/4WQrf9ujO7/bIfi/5Kbsf9/jrr/cI7z/3KR9f9xkPP/Z3/T/1hp
        qPwuJihaMSsyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP0BZADMuOXpcbrP/YXbC/3KR
        9f9ykfX/cpH2/22G2f+Wn6//hZK1/2uF2/+Aj73/jJez/2mB1P+Fkrb/lp6v/22G2f9ykfb/cpH1/3GQ
        8/9jecj/WGim/C4mKFoxKzIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/QFkAMy45elxu
        s/9hdsL/cpH1/3KR9f9ykfX/cZD1/2+Fz/+TnbD/ho6k/3qEo/+Jk6v/d4Ce/5Kbr/9vhc//cZD1/3KR
        9f9ykfX/cZDz/2Z+0P9YaKj8LiYoWjErMgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD9A
        WQAzLjl6XG6y/2F2wv9ykfX/cpH1/3KR9f9ykfX/cZH1/26I4P9ugsj/dIKw/32Iqv9qgc//bYjg/3GR
        9f9ykfX/cpH1/3KR9f9ykfT/b4zs/1pqq/wuJihaMSsyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAP0BZADMuOXpdb7X/YXXA/3KR9f9ykfX/cpH1/3KR9f9ykfX/cpH2/3KS9/9uiub/bIfe/3KR
        9/9ykfb/cpH1/3KR9f9ykfX/cpH1/3KR9f9zk/n/Wmut/C4mJ1oxKzIAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAA5N0oAMSsyb15xuP9fc7z/boro/3OS9/9ykfX/cpH1/3KR9f9ykfX/cpH1/3KR
        9v9ykvb/cpH1/3KR9f9ykfX/cpH1/3KR9f9ykfX/cpH1/3OT+f9YZ6X6LCIhTy4mKAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAC0lJgAqHxxBUV2R8WmE3P9ecbn/a4fh/3CO8P9xj/H/cY/x/3GP
        8f9xj/H/cY/x/3GP8f9xj/H/cY/x/3GP8f9xj/H/cpDz/3KR9f9ykfb/cY/w/0lReuElGA4pKiAeAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKiAcAB4OAAo3NEWeXW+1/2qE3P9hdsL/X3O8/19z
        vf9fc73/X3O9/19zvf9fc73/X3O9/19zvf9fc73/X3O9/19zvP9qhNz/c5P5/3CO7/9XZ6T7My44gQwA
        AAIqIR0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKRwYACYYEBk2MT+RSlN/5FVk
        nvhWZaD7VWSf+1Vkn/tVZJ/7VWSf+1Vkn/tVZJ/7VWSf+1Vkn/tVZJ/7VWSf+1ZloftUYpz3R0513TMu
        N30kFgoOKBwUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHQwAABsK
        AAUlGA4pKR4ZRSsgHUsrIB1LKyAdSysgHUsrIB1LKyAdSysgHUsrIB1LKyAdSysgHUsrIB1LKyAdSygd
        GEMkFgwiFgMAAxkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////////////////////+AAB//AAAP/gAAB/4AAAf+AAAH/gA
        AB/4AAAf+AAAH/gAAB/4AAAf+AAAH/gAAB/4AAAf+AAAH/gAAB/4AAAf+AAAH/gAAB/4AAAf+AAAH/wA
        AD/+AAB///////////////////////////8=
</value>
  </data>
</root>